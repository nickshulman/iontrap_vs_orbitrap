plot <- ggplot(CV_pairwise, aes(x = log_rat, fill = lower_cv)) +
geom_histogram(color = "grey", bins = 50, size = 0.25) +
geom_vline(xintercept = median(CV_pairwise$log_rat), linetype = "dashed", size = 0.5) +
theme_minimal() +
xlab("log10(CV in linear ion trap/CV in Orbitrap)") +
ylab("Number of peptides") +
#scale_fill_viridis(discrete = TRUE) +
scale_fill_manual(values = c("#2D708EFF", "#FDE725FF")) +
theme(legend.position = c(0.25,0.85)) +
labs(fill = "Lower % CV in:") +
annotate("text", label = paste0("log10(median) = ", round(median(CV_pairwise$log_rat), 3),
"\nmedian = ", round(median(CV_pairwise$ratio), 3)),
x = median(CV_pairwise$log_rat) + 0.05,
y = 30, hjust = "left")
return(plot)
}
cv_pairwise_histogram(CV_pairwise)
# Violin plot
cv_violin(CV_df)
cv_pairwise_histogram(CV_pairwise)
plot <- ggplot(CV_pairwise, aes(x = log_rat, fill = lower_cv)) +
geom_histogram(color = "grey", bins = 50, size = 0.25) +
geom_vline(xintercept = median(CV_pairwise$log_rat), linetype = "dashed", size = 0.5) +
theme_minimal() +
xlab("log10(CV in linear ion trap/CV in Orbitrap)") +
ylab("Number of peptides") +
#scale_fill_viridis(discrete = TRUE) +
scale_fill_manual(values = c("#2D708EFF", "#FDE725FF")) +
theme(legend.position = "bottom") +
labs(fill = "Lower % CV in:") +
annotate("text", label = paste0("log10(median) = ", round(median(CV_pairwise$log_rat), 3),
"\nmedian = ", round(median(CV_pairwise$ratio), 3)),
x = median(CV_pairwise$log_rat) + 0.05,
y = 30, hjust = "left")
cv_pairwise_histogram(CV_pairwise)
cv_pairwise_histogram <- function(CV_pairwise){
plot <- ggplot(CV_pairwise, aes(x = log_rat, fill = lower_cv)) +
geom_histogram(color = "grey", bins = 50, size = 0.25) +
geom_vline(xintercept = median(CV_pairwise$log_rat), linetype = "dashed", size = 0.5) +
theme_minimal() +
xlab("log10(CV in linear ion trap/CV in Orbitrap)") +
ylab("Number of peptides") +
scale_fill_manual(values = c("#2D708EFF", "#FDE725FF")) +
theme(legend.position = "bottom") +
labs(fill = "Lower % CV in:") +
annotate("text", label = paste0("log10(median) = ", round(median(CV_pairwise$log_rat), 3),
"\nmedian = ", round(median(CV_pairwise$ratio), 3)),
x = median(CV_pairwise$log_rat) + 0.05,
y = 30, hjust = "left")
return(plot)
}
cv_pairwise_histogram(CV_pairwise)
# Violin plot
cv_violin(CV_df)
plot <- ggplot(CV_df, aes(y = median_CV, fill = Analyzer, x = Analyzer)) +
geom_violin(color = NA) +
geom_boxplot(width=0.1, fill="white", outlier.shape = NA, color = "grey") +
geom_jitter(data = function(x) dplyr::filter_(x, ~ outlier), color = "grey", width = 0.1) +
theme_minimal() +
scale_fill_viridis(discrete = TRUE, option="D") +
ylab("% CV") + xlab("Analyzer") +
geom_hline(yintercept = 20, linetype = "dashed", color = "black", size = 0.5) +
theme(legend.position = "none")
# Violin plot
cv_violin(CV_df)
cv_violin <- function(CV_df) {
plot <- ggplot(CV_df, aes(y = median_CV, fill = Analyzer, x = Analyzer)) +
geom_violin(color = NA) +
geom_boxplot(width=0.1, fill="white", outlier.shape = NA, color = "grey") +
geom_jitter(data = function(x) dplyr::filter_(x, ~ outlier), color = "grey", width = 0.1) +
theme_minimal() +
scale_fill_viridis(discrete = TRUE, option="D") +
ylab("% CV") + xlab("Analyzer") +
geom_hline(yintercept = 20, linetype = "dashed", color = "black", size = 0.5) +
theme(legend.position = "none")
return(plot)
}
# Violin plot
cv_violin(CV_df)
IT_original_fom <- read.delim("matrix-data/orig_quant_limits_IT.txt") %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/orig_quant_limits_IT_2.txt")
IT_original_fom <- read.delim("data/orig_quant_limits_IT.txt") %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/orig_quant_limits_IT_2.txt")
IT_original_fom <- read.delim("data/orig_quant_limits_IT.txt") %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/orig_quant_limits_IT_2.txt", quote = FALSE, sep = "\t")
IT_original_fom <- read.delim("data/orig_quant_limits_IT.txt", check.names = FALSE) %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/orig_quant_limits_IT_2.txt", quote = FALSE, sep = "\t", row.names = FALSE)
IT_original_fom <- read.delim("data/orig_quant_limits_IT.txt", check.names = FALSE) %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/orig_quant_limits_IT_2.txt", quote = FALSE, sep = "\t", row.names = FALSE)
IT_original_fom <- read.delim("data/orig_quant_limits_IT.txt") %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/orig_quant_limits_IT_2.txt", quote = FALSE, sep = "\t", row.names = FALSE)
OT_original_fom <- read.delim("data/orig_quant_limits_OT.txt") %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/orig_quant_limits_OT_2.txt", quote = FALSE, sep = "\t", row.names = FALSE)
OT_original_fom <- read.delim("data/orig_quant_limits_IT_2.txt")
IT_original_fom <- read.delim("data/orig_quant_limits_IT_2.txt")
original_LOQ_comp <- full_join(select(IT_original_fom, LOQ, Peptide.Modified.Sequence),
select(OT_original_fom, LOQ, Peptide.Modified.Sequence), by = "Peptide.Modified.Sequence") %>%
set_colnames(c("IT_LOQ", "Peptide", "OT_LOQ")) %>%
mutate(ratio = IT_LOQ/OT_LOQ) %>%
mutate(Lower_loq = if_else(ratio > 1, "Orbitrap", "Tie")) %>%
mutate(Lower_loq = if_else(ratio < 1, "Linear ion trap", Lower_loq)) %>%
mutate(Lower_loq = if_else(is.na(ratio), "Tie", Lower_loq)) %>%
mutate(loq_rat = log(ratio, 10))
ggplot(original_LOQ_comp, aes(x = Lower_loq, fill = Lower_loq)) +
geom_histogram(stat = "count") +
theme_minimal() +
scale_fill_manual(values = c("#2D708EFF", "#FDE725FF", "grey")) +
#theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("Lower LOQ")+
coord_cartesian(ylim =c(0, 250))+
labs(fill = "Lower LOQ in:")  +
ylab("Number of peptides") #+
original_LOQ_comp <- full_join(select(IT_original_fom, LOQ, Peptide.Modified.Sequence),
select(OT_original_fom, LOQ, Peptide.Modified.Sequence), by = "Peptide.Modified.Sequence") %>%
set_colnames(c("IT_LOQ", "Peptide", "OT_LOQ")) %>%
mutate(ratio = IT_LOQ/OT_LOQ) %>%
mutate(Lower_loq = if_else(ratio > 1, "Orbitrap", "Tie")) %>%
mutate(Lower_loq = if_else(ratio < 1, "Linear ion trap", Lower_loq)) %>%
mutate(Lower_loq = if_else(is.na(ratio), "Tie", Lower_loq)) %>%
mutate(loq_rat = log(ratio, 10))
ggplot(original_LOQ_comp, aes(x = Lower_loq, fill = Lower_loq)) +
geom_histogram(stat = "count") +
theme_minimal() +
scale_fill_manual(values = c("#2D708EFF", "#FDE725FF", "grey")) +
#theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("Lower LOQ")+
coord_cartesian(ylim =c(0, 250))+
labs(fill = "Lower LOQ in:")  +
ylab("Number of peptides") #+
OT_original_fom <- read.delim("data/orig_quant_limits_OT_2.txt")
original_LOQ_comp <- full_join(select(IT_original_fom, LOQ, Peptide.Modified.Sequence),
select(OT_original_fom, LOQ, Peptide.Modified.Sequence), by = "Peptide.Modified.Sequence") %>%
set_colnames(c("IT_LOQ", "Peptide", "OT_LOQ")) %>%
mutate(ratio = IT_LOQ/OT_LOQ) %>%
mutate(Lower_loq = if_else(ratio > 1, "Orbitrap", "Tie")) %>%
mutate(Lower_loq = if_else(ratio < 1, "Linear ion trap", Lower_loq)) %>%
mutate(Lower_loq = if_else(is.na(ratio), "Tie", Lower_loq)) %>%
mutate(loq_rat = log(ratio, 10))
ggplot(original_LOQ_comp, aes(x = Lower_loq, fill = Lower_loq)) +
geom_histogram(stat = "count") +
theme_minimal() +
scale_fill_manual(values = c("#2D708EFF", "#FDE725FF", "grey")) +
#theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
xlab("Lower LOQ")+
coord_cartesian(ylim =c(0, 250))+
labs(fill = "Lower LOQ in:")  +
ylab("Number of peptides") #+
IT_original_fom <- read.delim("data/orig_quant_limits_IT.txt") %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/orig_quant_limits_IT.txt", quote = FALSE, sep = "\t", row.names = FALSE)
IT_original_fom <- read.delim("data/orig_quant_limits_IT.txt")
OT_original_fom <- read.delim("data/orig_quant_limits_OT.txt") %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/orig_quant_limits_OT.txt", quote = FALSE, sep = "\t", row.names = FALSE)
OT_original_fom <- read.delim("data/orig_quant_limits_OT.txt")
IT_original_fom <- read.delim("data/orig_quant_limits_IT.txt") %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/orig_quant_limits_IT.txt", quote = FALSE, sep = "\t", row.names = FALSE)
OT_original_fom <- read.delim("data/orig_quant_limits_OT.txt") %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/orig_quant_limits_OT.txt", quote = FALSE, sep = "\t", row.names = FALSE)
IT_opt_fom <- read.delim("data/opt_quant_limits_IT4.txt") %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR") %>%
write.table("data/opt_quant_limits_IT4.txt", quote = FALSE, sep = "\t", row.names = FALSE)
OT_opt_fom <- read.delim("data/opt_quant_limits_OT4.txt") %>%
filter(Peptide.Modified.Sequence != "LHVDPENFR" &
Peptide.Modified.Sequence != "TFYSC[+57]TTEGR" &
Peptide.Modified.Sequence != "WLPSSSPVTGYR" &
Peptide.Modified.Sequence != "YEELQITAGR" &
Peptide.Modified.Sequence != "LTPLYELVK" &
Peptide.Modified.Sequence != "YMDGMTVGVVR" &
Peptide.Modified.Sequence != "VTGWGNLK" &
Peptide.Modified.Sequence != "GIVEEC[+57]C[+57]FR" &
Peptide.Modified.Sequence != "YWGVASFLQK" &
Peptide.Modified.Sequence != "LAAAVSNFGYDLYR")  %>%
write.table("data/opt_quant_limits_OT4.txt", quote = FALSE, sep = "\t", row.names = FALSE)
comp_loq <- function(LIT_loq, OT_loq){
LIT_fom <- read.delim(LIT_loq)
OT_fom <- read.delim(OT_loq)
original_LOQ_comp <- full_join(select(LIT_fom, LOQ, Peptide.Modified.Sequence),
select(OT_fom, LOQ, Peptide.Modified.Sequence), by = "Peptide.Modified.Sequence") %>%
set_colnames(c("IT_LOQ", "Peptide", "OT_LOQ")) %>%
mutate(ratio = IT_LOQ/OT_LOQ) %>%
mutate(Lower_loq = if_else(ratio > 1, "Orbitrap", "Tie")) %>%
mutate(Lower_loq = if_else(ratio < 1, "Linear ion trap", Lower_loq)) %>%
mutate(Lower_loq = if_else(is.na(ratio), "Tie", Lower_loq)) %>%
mutate(loq_rat = log(ratio, 10))
return(original_LOQ_comp)
}
comp_loq("data/orig_quant_limits_IT.txt", "data/orig_quant_limits_OT.txt")
loq_comp_histogram <- function(LOQ_comp){
plot <- ggplot(original_LOQ_comp, aes(x = Lower_loq, fill = Lower_loq)) +
geom_histogram(stat = "count") +
theme_minimal() +
scale_fill_manual(values = c("#2D708EFF", "#FDE725FF", "grey")) +
xlab("Lower LOQ")+
coord_cartesian(ylim =c(0, 250))+
labs(fill = "Lower LOQ in:")  +
ylab("Number of peptides")
return(plot)
}
loq_comp_histogram(original_loq)
# Violin plot
cv_violin(CV_df)
loq_comp_histogram(original_loq)
loq_ratio_histogram <- function(LOQ_comp){
plot <- ggplot(LOQ_comp, aes(x = loq_rat, fill = Lower_loq)) +
geom_histogram(color = "grey", bins = 50, size = 0.25) +
geom_vline(xintercept=log(median(LOQ_comp$ratio), 10), linetype = "dashed") +
theme_minimal() +
xlab("log10(LOQ in linear ion trap/LOQ in Orbitrap)") +
ylab("Number of peptides") +
scale_fill_manual(values = c("#2D708EFF", "#FDE725FF", "grey")) +
labs(fill = "Lower LOQ in:")  +
annotate("text", label = paste0("log10(median) = ", round(median(LOQ_comp$loq_rat), 3),
"\nmedian = ", round(median(LOQ_comp$ratio), 3)),
x = median(LOQ_comp$loq_rat) - 0.05,
y = 45, hjust = "right") +
coord_cartesian(ylim = c(0, 50))
return(plot)
}
loq_ratio_histogram(original_loq)
loq_ratio_histogram <- function(LOQ_comp){
plot <- ggplot(LOQ_comp, aes(x = loq_rat, fill = Lower_loq)) +
geom_histogram(color = "grey", bins = 50, size = 0.25) +
geom_vline(xintercept=log(median(LOQ_comp$ratio), 10), linetype = "dashed") +
theme_minimal() +
xlab("log10(LOQ in linear ion trap/LOQ in Orbitrap)") +
ylab("Number of peptides") +
scale_fill_manual(values = c("#2D708EFF", "#FDE725FF", "grey")) +
labs(fill = "Lower LOQ in:")  +
annotate("text", label = paste0("log10(median) = ", round(median(LOQ_comp$loq_rat), 3),
"\nmedian = ", round(median(LOQ_comp$ratio), 3)),
x = median(LOQ_comp$loq_rat) - 0.05,
y = 45, hjust = "right") +
coord_cartesian(ylim = c(0, 50))
return(plot)
}
loq_ratio_histogram(original_loq)
# Compare original LOQs
original_loq <- comp_loq("data/orig_quant_limits_IT.txt", "data/orig_quant_limits_OT.txt")
loq_ratio_histogram(original_loq)
# Plot histogram of number of peptides better in each histogram
loq_count_histogram(original_loq)
loq_count_histogram <- function(LOQ_comp){
plot <- ggplot(original_LOQ_comp, aes(x = Lower_loq, fill = Lower_loq)) +
geom_histogram(stat = "count") +
theme_minimal() +
scale_fill_manual(values = c("#2D708EFF", "#FDE725FF", "grey")) +
xlab("Lower LOQ")+
coord_cartesian(ylim =c(0, 250))+
labs(fill = "Lower LOQ in:")  +
ylab("Number of peptides")
return(plot)
}
loq_ratio_histogram <- function(LOQ_comp){
plot <- ggplot(LOQ_comp, aes(x = loq_rat, fill = Lower_loq)) +
geom_histogram(color = "grey", bins = 50, size = 0.25) +
geom_vline(xintercept=log(median(LOQ_comp$ratio), 10), linetype = "dashed") +
theme_minimal() +
xlab("log10(LOQ in linear ion trap/LOQ in Orbitrap)") +
ylab("Number of peptides") +
scale_fill_manual(values = c("#2D708EFF", "#FDE725FF", "grey")) +
labs(fill = "Lower LOQ in:")  +
annotate("text", label = paste0("log10(median) = ", round(median(LOQ_comp$loq_rat), 3),
"\nmedian = ", round(median(LOQ_comp$ratio), 3)),
x = median(LOQ_comp$loq_rat) - 0.05,
y = 45, hjust = "right") +
coord_cartesian(ylim = c(0, 50))
return(plot)
}
# Compare original LOQs
original_loq <- comp_loq("data/orig_quant_limits_IT.txt", "data/orig_quant_limits_OT.txt")
# Plot histogram of number of peptides better in each histogram
loq_count_histogram(original_loq)
loq_ratio_histogram(original_loq)
# Compare optimized LOQs
original_loq <- comp_loq("data/opt_quant_limits_IT4.txt", "data/opt_quant_limits_OT4.txt")
# Compare optimized LOQs
opt_loq <- comp_loq("data/opt_quant_limits_IT4.txt", "data/opt_quant_limits_OT4.txt")
# Plot histogram of number of peptides better in each histogram in original
loq_count_histogram(opt_loq)
# Plot histogram of ratios of original LOQ
loq_ratio_histogram(opt_loq)
# Compare original LOQs
original_loq <- comp_loq("data/orig_quant_limits_IT.txt", "data/orig_quant_limits_OT.txt")
# Plot histogram of number of peptides better in each histogram in original
loq_count_histogram(original_loq)
# Plot histogram of ratios of original LOQ
loq_ratio_histogram(original_loq)
head(original_loq)
extract_chromatogram <- function(signal_over_time, rep1, rep2) {
chromatogram_raw <- read.csv(signal_over_time) %>%
filter(Replicate == rep1 | Replicate == rep2) %>%
mutate(Raw.Times = as.character(Raw.Times)) %>%
mutate(Raw.Intensities = as.character(Raw.Intensities)) %>%
mutate(Replicate = if_else(Replicate == rep1, "Rep 1", "Rep 2"))
chr_plot <- data.frame()
i <- 1
for(i in 1:nrow(chromatogram_raw)){
info <- data.frame(str_split(chromatogram_raw$Raw.Times[i], ",")) %>%
set_colnames(c("time")) %>%
cbind(data.frame(str_split(chromatogram_raw$Raw.Intensities[i], ","))) %>%
set_colnames(c("time", "int")) %>%
mutate(time = as.numeric(as.character(time)))  %>%
mutate(int = as.numeric(as.character(int))) %>%
mutate(Ion = chromatogram_raw$Fragment.Ion[i])%>%
mutate(Replicate = chromatogram_raw$Replicate[i]) %>%
mutate(left = chromatogram_raw$Min.Start.Time[i]) %>%
mutate(right = chromatogram_raw$Max.End.Time[i])
chr_plot <- rbind(chr_plot, info)
}
return(chr_plot)
}
chr_plot <- extract_chromatogram("data/interference_signal_over_time.csv", "IT_1-7_3", "IT_1-7_6")
View(chr_plot)
head(chr_plot)
plot_chromatogram <- function(chr_plot){
plot <-
ggplot(chr_plot, aes(x = time, y = int, color = Ion)) +
geom_line(size = 1) +
scale_color_viridis_d() +
theme_minimal() +
geom_facet(~Replicate)
geom_vline(data = chr_plot, aes(xintercept = left), linetype = "dashed") +
geom_vline(data = chr_plot, aes(xintercept = right), linetype = "dashed") +
ylab("Intensity") +
xlab("time (min)") +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
return(plot)
}
plot_chromatogram(chr_plot)
plot_chromatogram <- function(chr_plot){
plot <-
ggplot(chr_plot, aes(x = time, y = int, color = Ion)) +
geom_line(size = 1) +
scale_color_viridis_d() +
theme_minimal() +
facet_wrap(~Replicate)
geom_vline(data = chr_plot, aes(xintercept = left), linetype = "dashed") +
geom_vline(data = chr_plot, aes(xintercept = right), linetype = "dashed") +
ylab("Intensity") +
xlab("time (min)") +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
return(plot)
}
plot_chromatogram(chr_plot)
plot_chromatogram <- function(chr_plot){
plot <-
ggplot(chr_plot, aes(x = time, y = int, color = Ion)) +
geom_line(size = 1) +
scale_color_viridis_d() +
theme_minimal() +
facet_wrap(~Replicate) +
geom_vline(data = chr_plot, aes(xintercept = left), linetype = "dashed") +
geom_vline(data = chr_plot, aes(xintercept = right), linetype = "dashed") +
ylab("Intensity") +
xlab("time (min)") +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
return(plot)
}
plot_chromatogram(chr_plot)
plot_chromatogram <- function(chr_plot){
plot <-
ggplot(chr_plot, aes(x = time, y = int, color = Ion)) +
geom_line(size = 1) +
scale_color_viridis_d() +
theme_minimal() +
facet_wrap(~Replicate, nrow = 2) +
geom_vline(data = chr_plot, aes(xintercept = left), linetype = "dashed") +
geom_vline(data = chr_plot, aes(xintercept = right), linetype = "dashed") +
ylab("Intensity") +
xlab("time (min)") +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
return(plot)
}
plot_chromatogram(chr_plot)
extract_quant <- function(quant_doc, rep1, rep2) {
quant_df <- read.csv(quant_doc) %>%
filter(Replicate.Name == rep1 | Replicate.Name == rep2) %>%
select(Replicate.Name, Fragment.Ion, Area) %>%
set_colnames(c("Replicate", "Ion", "Area")) %>%
mutate(Replicate = if_else(Replicate == rep1, "Run 1", "Run 2"))
return(quant_df)
}
plot_ion_quant <- function(quant_df){
plot <-
ggplot(quant_df, aes(x = Replicate, fill = Ion, y = Area)) +
geom_col()+
scale_fill_viridis_d() +
theme_minimal() +
theme(axis.title.x = element_blank(), legend.position = "right")
return(plot)
}
quant_df <- extract_quant("data/interference_transition_quant.csv", "IT_1-7_3", "IT_1-7_6")
plot_ion_quant(quant_df)
head(quant_df)
