import unittest
import calculate_loq as calc_loq
import numpy as np

class TestCalculateLoq(unittest.TestCase):
    areas = [0.16751, 0.17056, 0.18132, 0.17482, 0.17060, 0.16879, 0.17469, 0.17645, 0.16372, 0.17310, 0.17941,
             0.16681, 0.18539, 0.17096, 0.14598, 0.15127, 0.17316, 0.15454, 0.18983, 0.17845, 0.17239, 0.18395,
             0.18260, 0.18245, 0.19410, 0.16476, 0.17444, 0.18214, 0.17844, 0.16537]
    concentrations = [0.005, 0.005, 0.005, 0.01, 0.01, 0.01, 0.03, 0.03, 0.03, 0.05, 0.05, 0.05, 0.07, 0.07, 0.07,
                      0.1, 0.1, 0.1, 0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.7, 0.7, 0.7, 1.0, 1.0, 1.0]
    config = {'grid_size': 100, 'max_boot_iters': 100, 'min_boot_iters_for_measure': 10,
              'min_same_loq_count_for_accept': 25, 'cv_threshold': 0.2, 'debug_plot': False,
              'optimize_type': calc_loq.optimize_type.LOQ, 'minimum_num_transitions': 4
              }
    transition_areas = np.array([
        [
            0.16751410125091631409, 3.00915079259725359861, 1.11722399188912291379, 0.81733198743689461363,
            0.12911616716360180268, 1.76430493997375426041
        ],
        [
            0.17056394539830774248, 3.08373313809153781762, 1.13061528477993755715, 0.80732723538952655407,
            0.12787802569243905682, 1.84248540882006084374
        ],
        [
            0.18132310829694300858, 3.24233390929768638955, 1.18128937847621551249, 0.85079886906821078352,
            0.13501460057716671570, 1.95418527070999004103
        ],
        [
            0.17481819757815444949, 3.14519964096282622634, 1.16194550444372302067, 0.84589382517661160232,
            0.13508790357849004282, 1.84465724689993781915
        ],
        [
            0.17060122098892124831, 3.07519206143569467926, 1.13508303511806163399, 0.82676964263446861558,
            0.13069535785294938979, 1.80006361742260390102
        ],
        [
            0.16878907424836195328, 2.99023303660873818188, 1.10796399070380990892, 0.80467498930601510931,
            0.12953521203013307339, 1.74539885261277483153
        ],
        [
            0.17468792073850866742, 3.17047914972316879911, 1.14951316181279317163, 0.82580933932542577303,
            0.12924791200364865729, 1.92382819540429350624
        ],
        [
            0.17644813912927478916, 3.16266032787611184318, 1.15579271256038373927, 0.82607994740327361782,
            0.13136284963230590583, 1.90994582329214979133
        ],
        [
            0.16371742156407967372, 2.93390002228872015522, 1.06425870398444111231, 0.76469346822680273057,
            0.12051403804917687479, 1.79114406127301717397
        ],
        [
            0.17310143138183167744, 3.12008170056664502212, 1.14222571603614153624, 0.84626334897408761471,
            0.13228533175984083514, 1.88452998885256728379
        ],
        [
            0.17941092540284822587, 3.18994166498724851522, 1.16723041860580090123, 0.84223777232106122881,
            0.13567487621890658711, 1.90515943209900373567
        ],
        [
            0.16680693631785328823, 2.97506746338734862078, 1.08601821075886872947, 0.78130253234326596523,
            0.12340016431457509483, 1.79878807075162883145
        ],
        [
            0.18538729178290436206, 3.32346208078049842882, 1.21955808108675944901, 0.89819814757896510038,
            0.14254403280273669763, 1.99490649498965288977
        ],
        [
            0.17095864517463760235, 3.07278169978321313849, 1.13382854900306573320, 0.82496287387962941029,
            0.13212539993100691493, 1.80163225873199572824
        ],
        [
            0.14598190411813735667, 2.63538417912891809181, 0.96009508581517444270, 0.68285107553856216889,
            0.10963703742415030484, 1.61974864019682951444
        ],
        [
            0.15127294198874896569, 2.76797571667984554367, 1.00131174024903035757, 0.74272885343745254083,
            0.11568577259276509317, 1.67863335202872576701
        ],
        [
            0.17316355725229937157, 3.08448428824979670182, 1.13110446538521980386, 0.81096308398055205746,
            0.12886961092506288296, 1.83862629452985837375
        ],
        [
            0.15453859890854404480, 2.76473630136679071612, 1.00492242194850711634, 0.71682506313519878116,
            0.11317058839718631413, 1.69002739217342345945
        ],
        [
            0.18982538603861914828, 3.39261069576720020180, 1.24612924623786747169, 0.90024823562800304622,
            0.14278960357599213005, 1.99268257893363887057
        ],
        [
            0.17844572795585969538, 3.18818628227067346614, 1.16404971605602924889, 0.83902221845562552360,
            0.13554030398107935751, 1.89428754851058034347
        ],
        [
            0.17238551978383606644, 3.09329454290608119038, 1.13102919399957557722, 0.81038456879063536231,
            0.12711912934616806381, 1.87121476309031087304
        ],
        [
            0.18394863874458500241, 3.33771447258528475288, 1.21277112704675582577, 0.86201922340582914916,
            0.13690577022933755891, 2.01117399887458603303
        ],
        [
            0.18259777255768575022, 3.30037645693274628300, 1.21004354188978990869, 0.87504332168959386706,
            0.13775243071866857814, 1.96382259175069884272
        ],
        [
            0.18244797451097016783, 3.27943494260390311368, 1.18105644311086832587, 0.84827992051136247298,
            0.13170173121075218203, 2.01662877169065213323
        ],
        [
            0.19410055743442611309, 3.54058006235680222673, 1.29093627572236591128, 0.93412125614783148020,
            0.14647199050169787404, 2.10869118454420956255
        ],
        [
            0.16475701451119897922, 2.93593611803801834981, 1.06142590693418203962, 0.76248957669323913500,
            0.11993870622347656274, 1.78616848948781581363
        ],
        [
            0.17443985536651376855, 3.14415803684663064388, 1.12768336328078278008, 0.80376776775617686521,
            0.12551374163456885391, 1.92247991099106729784
        ],
        [
            0.18213835271296621721, 3.38337386031157771882, 1.22164867564245716025, 0.87152930939957340417,
            0.13596534450530833871, 2.04801854445343733957
        ],
        [
            0.17843792934976931974, 3.17653841038631901128, 1.19604085277728144909, 0.88199438514931927102,
            0.14300379959229159166, 1.84532059820752047941
        ],
        [
            0.16536813312110928975, 2.96369601944129090754, 1.08120101842486260324, 0.78330633583208053583,
            0.12237734093613208963, 1.83490184829576885583
        ],
    ])


    def test_fit_conc_vs_area(self):
        result = calc_loq.fit_conc_vs_area(self.concentrations, self.areas)
        slope = result['params'][0]
        intercept = result['params'][1]
        baseline_height = result['params'][2]
        self.assertAlmostEqual(0.025854009062249942, slope)
        self.assertAlmostEqual(0.16317916521766687, intercept)
        self.assertAlmostEqual(0.172315, baseline_height)
        self.assertAlmostEqual(0.057632885215053185, result['error'])
        self.assertAlmostEqual(0.0008070195509128315, result['baseline_std'])

    def test_bilinear_fit(self):
        unique_concentrations, mean_areas = calc_loq.get_unique_conc_and_mean_areas(self.concentrations, self.areas)
        result = calc_loq.bilinear_fit(0.03, unique_concentrations, mean_areas)
        # [0.00239897 0.16965172 0.17205111]
        self.assertAlmostEqual(0.00239897, result['params'][0])  # slope
        self.assertAlmostEqual(0.16965172, result['params'][1])  # intercept
        self.assertAlmostEqual(0.17205111, result['params'][2])  # baseline
        self.assertAlmostEqual(0.07240250761116633, result['error'])
        self.assertAlmostEqual(0.0007680004501027473, result['baseline_std'])

    def test_bilinear_fit_too_few_points(self):
        unique_concentrations, mean_areas = calc_loq.get_unique_conc_and_mean_areas(self.concentrations, self.areas)
        result = calc_loq.bilinear_fit(0.7, unique_concentrations, mean_areas)
        self.assertEqual(0.0, result['params'][0])  # slope
        self.assertEqual(0.0, result['params'][1])  # intercept
        self.assertAlmostEqual(0.17326666666666662, result['params'][2])  #baseline
        self.assertAlmostEqual(0.0648963223840987, result['error'])
        self.assertAlmostEqual(0.00626862504860516, result['baseline_std'])

    def test_compute_quantitative_limits(self):
        concentrations = [0.005, 0.005, 0.005, 0.01, 0.01, 0.01, 0.03, 0.03, 0.03, 0.05, 0.05, 0.05, 0.07, 0.07, 0.07,
                          0.1, 0.1, 0.1, 0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.7, 0.7, 0.7, 1.0, 1.0, 1.0]

        areas = [0.14685, 0.1646, 0.21232, 0.15662, 0.16293, 0.13719, 0.17409, 0.16193, 0.13625, 0.16065, 0.16249, 0.16409, 0.14434, 0.17133, 0.16018, 0.16517, 0.16808, 0.14533, 0.16407, 0.1659, 0.16019, 0.17952, 0.16168, 0.16217, 0.19297, 0.14971, 0.16969, 0.17356, 0.16252, 0.15779]

        result = calc_loq.compute_quantitative_limits(concentrations, areas, self.config)
        self.assertAlmostEqual(0.8052500937105422, result[calc_loq.optimize_type.LOD])
        self.assertAlmostEqual(1, result[calc_loq.optimize_type.LOQ])

    def test_compute_bootstrapped_loq(self):
        concentrations = [0.005, 0.005, 0.005, 0.01, 0.01, 0.01, 0.03, 0.03, 0.03, 0.05, 0.05, 0.05, 0.07, 0.07, 0.07,
                          0.1, 0.1, 0.1, 0.3, 0.3, 0.3, 0.5, 0.5, 0.5, 0.7, 0.7, 0.7, 1.0, 1.0, 1.0]
        areas = [0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000,
                 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000,
                 0.00000000000000000000, 0.00014956993646152492, 0.00014995676055750597, 0.00000000000000000000,
                 0.00017176402663390654, 0.00043060652812320662, 0.00000000000000000000, 0.00047242916172544338,
                 0.00024007723157733063, 0.00016317133730713851, 0.00224918647629133951, 0.00208678377690913949,
                 0.00126969307708830310, 0.00352413988932613045, 0.00360755126030127627, 0.00287816697272668147,
                 0.00512273079101743887, 0.00491574289577129727, 0.00501447277612654049, 0.00750785941174682541,
                 0.00808758893988542615, 0.00522947445339865240, 0.00000000000000000000, 0.00000000000000000000,
                 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000,
                 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000, 0.00014956993646152492,
                 0.00014995676055750597, 0.00000000000000000000, 0.00017176402663390654, 0.00043060652812320662,
                 0.00000000000000000000, 0.00047242916172544338, 0.00024007723157733063, 0.00016317133730713851,
                 0.00224918647629133951, 0.00208678377690913949, 0.00126969307708830310, 0.00352413988932613045,
                 0.00360755126030127627, 0.00287816697272668147, 0.00512273079101743887, 0.00491574289577129727,
                 0.00501447277612654049, 0.00750785941174682541, 0.00808758893988542615, 0.00522947445339865240,
                 ]
        result = calc_loq.compute_quantitative_limits(concentrations, areas, self.config)
        self.assertAlmostEqual(0.040720734079698576, result[calc_loq.optimize_type.LOD])
        self.assertAlmostEqual(0.07947949229870066, result[calc_loq.optimize_type.LOQ])

    def test_compute_lod(self):
        best_fit = calc_loq.fit_conc_vs_area(self.concentrations, self.areas)
        unique_concentrations, mean_areas = calc_loq.get_unique_conc_and_mean_areas(self.concentrations, self.areas)
        result = calc_loq.compute_lod(best_fit, unique_concentrations)
        self.assertAlmostEqual(0.3845768874492954, result)

    def test_compute_quantitative_limits(self):
        self.config['max_boot_iters'] = 100000
        self.config['min_boot_iters_for_measure'] = 10000
        loqs = []
        lods = []
        for transitionIndex in range(6):
            result = calc_loq.compute_quantitative_limits(
                self.concentrations, self.transition_areas[:, transitionIndex], self.config)
            loqs.append(result[calc_loq.optimize_type.LOQ])
            lods.append(result[calc_loq.optimize_type.LOD])
        self.assertAlmostEqual(.005, loqs[1])

    def test_optimize_transitions(self):
        peptide_info = {'concentrations': self.concentrations, 'areas': self.transition_areas,
                        'peptide_modified_sequence': 'ELVIS'}
        result = calc_loq.optimize_transitions(peptide_info, self.config)
        self.assertEqual(result['accepted_fragment_indices'], [1, 3, 0, 5])
        self.assertAlmostEqual(result['quant_limit'][calc_loq.optimize_type.LOD], 0.3719707784516309);
        self.assertAlmostEqual(result['quant_limit'][calc_loq.optimize_type.LOQ], 0.3719707784516309);
